#version 450 core

uniform sampler2DShadow shadow_texture;

in vec4 shadow_coordinate;
in vec3 normal;
in vec4 viewspace_position;

uniform vec3 light_direction;
uniform vec3 half_vector;
uniform vec3 color;

float shininess = 200.0;
float strength = 0.7;

out vec4 Fragment_Color;

void main() {
    vec3 light_color = vec3(1.0, 1.0, 1.0);
    vec3 ambient = vec3(0.1, 0.1, 0.1);
    float diffuse_intensity = max(0.0, dot(normalize(normal), light_direction));
    float specular_intensity = (diffuse_intensity == 0.0) ? 0.0 : pow(max(0.0, dot(normal, half_vector)), shininess) * strength;
    vec3 scattered_light = ambient + light_color * diffuse_intensity;
    vec3 reflected_light = light_color * specular_intensity;
    Fragment_Color = textureProj(shadow_texture, shadow_coordinate) * vec4(min((color * scattered_light + specular_intensity), vec3(1.0)), 1.0);
}